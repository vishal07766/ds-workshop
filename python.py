# -*- coding: utf-8 -*-
"""Python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IGykdzKNLs4mfFzphgOulAK1JOPIF3nO

# Test
"""

print("Hello Python")

"""# Data Type

### Int
"""

# Sales_data_var

a = 3
print(a)

print(type(a))

b = -3

print(type(b))

"""### Float"""

b = 3.5
print(b)

print(type(b))

c = 3.0
print(type(c))

d = -3.5
print(type(c))

"""### string"""

a = 'I like cats'
b = "I dont like dog"

print(type(a))

print(type(b))

b = 'I don't like dog'

# "\" can be used as an escape character:
b = 'I don\'t like dog'
print(b)

b = "I don't like dog"
print(b)

c = "I like cats.I dont like dogs."
print(c)

c = "I like cats.\nI dont like dogs."
print(c)

c = "I like cats.\tI dont like dogs."
print(c)

c = "I like "cats""
print(c)

c = "I like \"cats\""
print(c)

"""### Bool"""

a = True
b = False

print(type(a))
print(type(b))

"""### None"""

a = None
print(type(a))

#In dataset we have columns of different types (kyc) (name (str), age (int), height (float), verified (bool))

"""# Rules and Best Practices for Naming Variables in Python

---

## **Rules (Mandatory)**
1. **Start with a letter or an underscore**:  
   Variable names must begin with a letter (a-z, A-Z) or an underscore (`_`).  
   - ✅ Valid: `name`, `_age`
   - ❌ Invalid: `1name`, `-value`

2. **Contain only letters, numbers, and underscores**:  
   Variable names can include letters, numbers, and underscores, but no special characters or spaces.  
   - ✅ Valid: `user_name`, `age2`
   - ❌ Invalid: `user-name`, `age!`

3. **Cannot be a Python keyword**:  
   Reserved words (e.g., `if`, `while`, `return`) cannot be used as variable names.  
   - ❌ Invalid: `if`, `class`

4. **Case-sensitive**:  
   Python distinguishes between uppercase and lowercase letters.  
   - Example: `Name` and `name` are two different variables.

---

## **Best Practices (Recommended)**
1. **Use descriptive names**:  
   Choose meaningful names that describe the variable's purpose.  
   - ✅ Good: `total_cost`, `user_age`
   - ❌ Bad: `x`, `a1`

2. **Follow snake_case convention**:  
   Use lowercase letters and underscores to separate words.  
   - ✅ Good: `user_name`, `max_value`
   - ❌ Bad: `userName` (camelCase, used in other languages)

3. **Avoid starting with underscores unless necessary**:  
   Names starting with `_` have special meanings (e.g., `_private_var`). Use them only for internal purposes.

4. **Be consistent**:  
   Stick to one naming style (e.g., always use `snake_case`).

5. **Use singular or plural forms appropriately**:  
   Use singular names for single items and plural for collections.  
   - Example: `user` for one user, `users` for a list of users.

6. **Avoid single-letter names (except for loops)**:  
   Single-character names like `x`, `y`, or `i` are acceptable only in short loops. Use descriptive names elsewhere.  
   - ✅ Good: `for index in range(5):`
   - ❌ Bad: `for i in range(5):`

7. **Avoid using built-in function names**:  
   Don’t name variables after Python's built-in functions like `list`, `str`, `input`.  
   - ❌ Invalid: `list = [1, 2, 3]`

8. **Use constants for fixed values**:  
   Variables that don't change should be written in uppercase with underscores.  
   - Example: `PI = 3.14`, `MAX_USERS = 100`

---

# Operators

### "+" addition
"""

a = 3 # int
aa = 4
print(a,aa)

a + aa # 3 + 4

a + a + aa # 3 + 3 + 4

b = 4.5 # float
bb = 4.7

b + bb # 4.5 + 4.7

a + aa + b + bb #  3 + 4 + 4.5 + 4.7

c = "hello" # string
cc = "world"

c + a # "hello" + 3 = error

a = "3"
c + a

c + cc # "hello" + "world"

c + c + cc # "hello" + "hello" + "world"

cc = "4"
print(type(cc))

c + cc # "hello" + "4"

a = 3
d = True
dd = False
d + a # True + 3

d + d # True + True

dd + a # False + 3

dd + dd # False + False

e = None

e + e # None + None

e + a # None + 3

"""### "-" subtraction"""

a = 3 # int
aa = 4
print(a,aa)

a - aa # 3 - 4

aa - a # 4 - 3

b = 4.5 # float

a - aa - b # 3 - 4 - 4.5

a = -3
b = 4
bb = -4.5

a - b # -3 - 4

a - bb # -3 - (-4.5)

c = "hello" # string

c - c

d = True
dd = False
d - a # True - (-3)

dd - a # False - (-3)

"""### "*" multiplication"""

a = 3

a * a # 3 * 3

aa = -3
a * aa # 3 * -3

aa * aa # -3 * -3

b = 3.5

a * b # 3 * 3.5

s = "abc"

s * s # "abc" * "abc"

s * a # "abc" * 3

s * 3.5 # "abc" * 3.5

d = True
dd = False
d * dd # True * False

d * d # True * True

"""### "/" divison"""

a = 3
b = 2

a / a # 3 / 3

a / b # 3 / 2

b = -2
a / b # 3 / -2

s = "hello"
s / a # "hello" / 3

s / s # "hello" / "hello"

d = True
dd = False
d / dd # True / False

d / d # True / True

"""### "%" modulus"""

a = 3
b = 2

a % a # 3 % 3

a % b # 3 % 2

"""### "**" exponential"""

a = 3
b = 3

a * a * a # 3 * 3 * 3

a ** b # 3 ** 3

a ** 100

# In dataset we perform columns manipulation (rental dataset) (location coordinates, nearest_station coordinates)
# calculate distance between location coordinates and nearest_station coordinates

"""# String variable more

### Printing strings with variables
"""

a = 5
b = 3

print("value of a is a")
print("value of b is b")

print(f"value of a is {a}")
print(f"value of b is {b}")

a = 5
b = 3

print(f"Addition for {a} and {b} is {a + b}")
print(f"Subtraction for {a} and {b} is {a - b}")
print(f"Multiplication for {a} and {b} is {a * b}")
print(f"Division for {a} and {b} is {a / b}")
print(f"Modulo for {a} and {b} is {a % b}")
print(f"Exponential for {a} and {b} is {a ** b}")

a = 5
b = 3

print("Addition for {} and {} is {}".format(a, b, a + b))
print("Subtraction for {} and {} is {}".format(a, b, a - b))
print("Multiplication for {} and {} is {}".format(a, b, a * b))
print("Division for {} and {} is {}".format(a, b, a / b))
print("Modulo for {} and {} is {}".format(a, b, a % b))
print("Exponential for {} and {} is {}".format(a, b, a ** b))

"""### Built in string functions

#### len
"""

s = "hello"

print(len(s))

s1 = "hello "
print(len(s1))

"""#### replace"""

s = "hello"

print(s.replace("h", ""))

s2 = "CB5"
s2.replace("CB","cb")

print(s.replace("l", "L"))

s1 = "hello world"

# Convert to uppercase
print("Uppercase:", s1.upper())

# Convert to lowercase
print("Lowercase:", s1.lower())

# Capitalize the first character
print("Capitalize:", s1.capitalize())

# Title case (capitalize each word)
print("Title Case:", s1.title())

# Find the position of a substring
print("Position of 'world':", s1.find("world"))

# Replace a substring
print("Replace 'world' with 'Python':", s1.replace("world", "Python"))

# Check if string starts with "hello"
print("Starts with 'hello':", s1.startswith("hello"))

# Check if string ends with "world"
print("Ends with 'world':", s1.endswith("world"))

# Count occurrences of 'l'
print("Count of 'l':", s1.count("l"))

# In most dataset you will find string columns for eg movie reviews
# so there you will use above string manipulations and built in functions

"""### Assignment"""

# 1. print "hello worLd" 100 times
# 2. on output of 1, count number or occurance of "l" (small "l", capital "L", and all "l" + "L")
# 3. on output of 1, replace small case with upper and vice versa (try using some inbuilt string function)

# Find square root and cube root of any number using ** operator

# Difference between "/" and "//" operator

"""# Comparison operators

### "==" euqal to
"""

3 == 3

4 == 3

a = 3
b = "3"

a == b # 3 == "3"

3 == 3.0

True == 1 # 1 == 1

None == None

"""### "!=" not equal to"""

a = 3
b = 4

a != b # 3 != 4

False != 0 # 0 != 0

"""### ">" greater than and ">=" greater than or equal to"""

a = 3
b = 4

a > 3 # 3 > 3

b > a # 4 > 3

a >= 3 # 3 >= 3

"""### "<" less than and "<=" less than or equal to"""

a = 3
b = 4

a < 3 # 3 > 3

a < b # 3 < 4

b <= 4 # 4 >= 4

"""# Logical Operators

### "and"
"""

print(True and True)
print(True and False)
print(False and True)
print(False and False)

a = 3
b = 4

print(a < b and a < 5)
print(a < b and a > 5)
print(a > b and a < 5)
print(a > b and a > 5)

print(1 and 1)
print(1 and 0)
print(0 and 1)
print(0 and 0)

a = 1
b = 0

print(a and b)

""""or"
"""

print(True or True)
print(True or False)
print(False or True)
print(False or False)

a = 3
b = 4

print(a < b or a < 5)
print(a < b or a > 5)
print(a > b or a < 5)
print(a > b or a > 5)

print(1 or 1)
print(1 or 0)
print(0 or 1)
print(0 or 0)

a = 1
b = 0

print(a or b)

""""not"
"""

a = 1
b = 0

print(not a)
print(not b)

a = True
b = False

print(not a)
print(not b)

"""### Assignment"""

#1. Use Logical operator to find bigger number from given two numbers a = 3, b = 5 (dont use if else)

"""# Conditional Statements (if-else)"""

x = 10
if x > 5:
    print("x is greater than 5")

x = 3
if x > 5:
    print("x is greater than 5")
else:
    print("x is less than or equal to 5")

x = 7
if x > 10:
    print("x is greater than 10")
elif x == 7:
    print("x is equal to 7")
else:
    print("x is less than 10 and not equal to 7")

x = 15
if x > 10:
    if x < 20:
        print("x is between 10 and 20")
    else:
        print("x is greater than or equal to 20")
else:
    print("x is less than or equal to 10")

x = 8
if x > 5 and x < 10:
    print("x is between 5 and 10")

x = 3
if x < 5 or x > 10:
    print("x is either less than 5 or greater than 10")

is_logged_in = False
if not is_logged_in:
    print("User is not logged in")

x = 5
y = 10
if x < y:
    print("x is less than y")

x = 4
y = 8
if x < 10 and y > 5:
    print("x is less than 10 and y is greater than 5")

# Mostly use for data analysis for eg analyzing age groups into bins (1-10, 11-20, etc)

"""### Assignment"""

# Using two variables find biggest among them, use a=3,b=-10 (use Conditional Statements)
# Using two variables a and b find if a is divisible by b, if not then print remainder (use Conditional Statements)

"""# Loop

### "for"
"""

for i in range(5):  # Iterates from 0 to 4
    print(i)

for i in range(1, 10, 2):  # Iterates from 1 to 9 with a step of 2
    print(i)

name = "Python"
for char in name:
    print(char)

for i in range(5):
    if i == 3:
        print("Breaking loop at", i)
        break
    print(i)

"""### "while"
"""

count = 0
while count < 5:
    print(count)
    count += 1  # Increment count

count = 0
while count < 3:
    print(count)
    count += 1
else:
    print("Loop finished")

count = 0
while True:
    print(count)
    count += 1
    if count == 5:
        print("Breaking loop")
        break

# Mostly use for iterating the dataset rows and performing some manipulation

"""# Functions"""

def greet():
    print("Hello, world!")

greet()

def greet(name):
    print(f"Hello, {name}!")

greet("Alice")

def add(a, b):
    return a + b

result = add(5, 3)
print("Sum:", result)

def greet(name="Guest"):
    print(f"Hello, {name}!")

greet()  # Uses default value
greet("Alice")  # Overrides default value

def math_operations(a, b):
    return a + b, a - b, a * b, a / b

addition, subtraction, multiplication, division = math_operations(10, 2)
print("Addition:", addition)
print("Subtraction:", subtraction)
print("Multiplication:", multiplication)
print("Division:", division)

def add_numbers(*args):
    return sum(args)

print("Sum:", add_numbers(1, 2, 3, 4, 5))

def print_details(**kwargs):
    for key, value in kwargs.items():
        print(f"{key}: {value}")

print_details(name="Alice", age=25, city="New York")

# Mostly use for organising code and improving redability

"""# Modules"""

import math

# Using functions from the math module
print("Square root of 16:", math.sqrt(16))
print("Value of pi:", math.pi)

from math import sqrt, pi

print("Square root of 25:", sqrt(25))
print("Value of pi:", pi)

# Commented out IPython magic to ensure Python compatibility.
# %%writefile math_operations.py
# def add(a, b):
#     return a + b
# 
# def subtract(a, b):
#     return a - b
# 
# def multiply(a, b):
#     return a * b

import math_operations

result = math_operations.add(5, 3)
print("Sum:", result)

result = math_operations.subtract(10, 2)
print("Difference:", result)

result = math_operations.multiply(4, 6)
print("Product:", result)

# Used for calling different machine learning modules or any module

"""# lambda function"""

add = lambda x, y: x + y
print(add(5, 3))  # Output: 8

greet = lambda: "Hello, World!"
print(greet())  # Output: Hello, World!

# Mostly use with map and filter or writing small functions

